#include <CKeyType.h>

#define NUM_KEYBOARD_PORTS 8

static CKeyType
key_map_lower[9][NUM_KEYBOARD_PORTS] = {
  { CKEY_TYPE_NUL, CKEY_TYPE_NUL         , CKEY_TYPE_NUL, CKEY_TYPE_Shift_L, CKEY_TYPE_Control_L , CKEY_TYPE_NUL        , CKEY_TYPE_NUL     , CKEY_TYPE_NUL      },
  { CKEY_TYPE_NUL, CKEY_TYPE_Up          , CKEY_TYPE_t  , CKEY_TYPE_x      , CKEY_TYPE_f         , CKEY_TYPE_5          , CKEY_TYPE_b       , CKEY_TYPE_h        },
  { CKEY_TYPE_NUL, CKEY_TYPE_Left        , CKEY_TYPE_y  , CKEY_TYPE_z      , CKEY_TYPE_d         , CKEY_TYPE_6          , CKEY_TYPE_n       , CKEY_TYPE_j        },
  { CKEY_TYPE_NUL, CKEY_TYPE_Down        , CKEY_TYPE_u  , CKEY_TYPE_s      , CKEY_TYPE_e         , CKEY_TYPE_7          , CKEY_TYPE_m       , CKEY_TYPE_k        },
  { CKEY_TYPE_NUL, CKEY_TYPE_Right       , CKEY_TYPE_i  , CKEY_TYPE_a      , CKEY_TYPE_w         , CKEY_TYPE_8          , CKEY_TYPE_Comma   , CKEY_TYPE_l        },
  { CKEY_TYPE_NUL, CKEY_TYPE_Alt_L       , CKEY_TYPE_o  , CKEY_TYPE_q      , CKEY_TYPE_3         , CKEY_TYPE_9          , CKEY_TYPE_Period  , CKEY_TYPE_Semicolon},
  { CKEY_TYPE_NUL, CKEY_TYPE_BracketLeft , CKEY_TYPE_p  , CKEY_TYPE_1      , CKEY_TYPE_2         , CKEY_TYPE_0          , CKEY_TYPE_Slash   , CKEY_TYPE_Colon    },
  { CKEY_TYPE_NUL, CKEY_TYPE_BracketRight, CKEY_TYPE_r  , CKEY_TYPE_Space  , CKEY_TYPE_c         , CKEY_TYPE_4          , CKEY_TYPE_v       , CKEY_TYPE_g        },
  { CKEY_TYPE_NUL, CKEY_TYPE_Home        , CKEY_TYPE_NUL, CKEY_TYPE_NUL    , CKEY_TYPE_NUL       , CKEY_TYPE_Minus      , CKEY_TYPE_Return  , CKEY_TYPE_BackSpace},
};

static CKeyType
key_map_upper[9][NUM_KEYBOARD_PORTS] = {
  { CKEY_TYPE_NUL, CKEY_TYPE_NUL         , CKEY_TYPE_NUL, CKEY_TYPE_Shift_R, CKEY_TYPE_Control_R , CKEY_TYPE_NUL        , CKEY_TYPE_NUL     , CKEY_TYPE_NUL      },
  { CKEY_TYPE_NUL, CKEY_TYPE_Up          , CKEY_TYPE_T  , CKEY_TYPE_X      , CKEY_TYPE_F         , CKEY_TYPE_Percent    , CKEY_TYPE_B       , CKEY_TYPE_H        },
  { CKEY_TYPE_NUL, CKEY_TYPE_Left        , CKEY_TYPE_Y  , CKEY_TYPE_Z      , CKEY_TYPE_D         , CKEY_TYPE_Ampersand  , CKEY_TYPE_N       , CKEY_TYPE_J        },
  { CKEY_TYPE_NUL, CKEY_TYPE_Down        , CKEY_TYPE_U  , CKEY_TYPE_S      , CKEY_TYPE_E         , CKEY_TYPE_Apostrophe , CKEY_TYPE_M       , CKEY_TYPE_K        },
  { CKEY_TYPE_NUL, CKEY_TYPE_Right       , CKEY_TYPE_I  , CKEY_TYPE_A      , CKEY_TYPE_W         , CKEY_TYPE_ParenLeft  , CKEY_TYPE_Less    , CKEY_TYPE_L        },
  { CKEY_TYPE_NUL, CKEY_TYPE_Alt_R       , CKEY_TYPE_O  , CKEY_TYPE_Q      , CKEY_TYPE_NumberSign, CKEY_TYPE_ParenRight , CKEY_TYPE_Greater , CKEY_TYPE_Plus     },
  { CKEY_TYPE_NUL, CKEY_TYPE_Backslash   , CKEY_TYPE_P  , CKEY_TYPE_Exclam , CKEY_TYPE_QuoteDbl  , CKEY_TYPE_AsciiCircum, CKEY_TYPE_Question, CKEY_TYPE_Asterisk },
  { CKEY_TYPE_NUL, CKEY_TYPE_Underscore  , CKEY_TYPE_R  , CKEY_TYPE_Space  , CKEY_TYPE_C         , CKEY_TYPE_Dollar     , CKEY_TYPE_V       , CKEY_TYPE_G        },
  { CKEY_TYPE_NUL, CKEY_TYPE_Home        , CKEY_TYPE_At , CKEY_TYPE_NUL    , CKEY_TYPE_NUL       , CKEY_TYPE_Equal      , CKEY_TYPE_Escape  , CKEY_TYPE_BackSpace},
};

struct KeycodePair {
  CKeyType keycode1;
  CKeyType keycode2;
};

static KeycodePair
lower_upper_map[] = {
 { CKEY_TYPE_QuoteLeft   , CKEY_TYPE_AsciiTilde   },
 { CKEY_TYPE_1           , CKEY_TYPE_Exclam       },
 { CKEY_TYPE_2           , CKEY_TYPE_At           },
 { CKEY_TYPE_3           , CKEY_TYPE_NumberSign   },
 { CKEY_TYPE_4           , CKEY_TYPE_Dollar       },
 { CKEY_TYPE_5           , CKEY_TYPE_Percent      },
 { CKEY_TYPE_6           , CKEY_TYPE_AsciiCircum  },
 { CKEY_TYPE_7           , CKEY_TYPE_Ampersand    },
 { CKEY_TYPE_8           , CKEY_TYPE_Asterisk     },
 { CKEY_TYPE_9           , CKEY_TYPE_ParenLeft    },
 { CKEY_TYPE_0           , CKEY_TYPE_ParenRight   },
 { CKEY_TYPE_Minus       , CKEY_TYPE_Underscore   },
 { CKEY_TYPE_Equal       , CKEY_TYPE_Plus         },
 { CKEY_TYPE_q           , CKEY_TYPE_Q            },
 { CKEY_TYPE_w           , CKEY_TYPE_W            },
 { CKEY_TYPE_e           , CKEY_TYPE_E            },
 { CKEY_TYPE_r           , CKEY_TYPE_R            },
 { CKEY_TYPE_t           , CKEY_TYPE_T            },
 { CKEY_TYPE_y           , CKEY_TYPE_Y            },
 { CKEY_TYPE_u           , CKEY_TYPE_U            },
 { CKEY_TYPE_i           , CKEY_TYPE_I            },
 { CKEY_TYPE_o           , CKEY_TYPE_O            },
 { CKEY_TYPE_p           , CKEY_TYPE_P            },
 { CKEY_TYPE_BracketLeft , CKEY_TYPE_BraceLeft    },
 { CKEY_TYPE_BracketRight, CKEY_TYPE_BraceRight   },
 { CKEY_TYPE_Backslash   , CKEY_TYPE_Bar          },
 { CKEY_TYPE_a           , CKEY_TYPE_A            },
 { CKEY_TYPE_s           , CKEY_TYPE_S            },
 { CKEY_TYPE_d           , CKEY_TYPE_D            },
 { CKEY_TYPE_f           , CKEY_TYPE_F            },
 { CKEY_TYPE_g           , CKEY_TYPE_G            },
 { CKEY_TYPE_h           , CKEY_TYPE_H            },
 { CKEY_TYPE_j           , CKEY_TYPE_J            },
 { CKEY_TYPE_k           , CKEY_TYPE_K            },
 { CKEY_TYPE_l           , CKEY_TYPE_L            },
 { CKEY_TYPE_Semicolon   , CKEY_TYPE_Colon        },
 { CKEY_TYPE_Apostrophe  , CKEY_TYPE_QuoteDbl     },
 { CKEY_TYPE_z           , CKEY_TYPE_Z            },
 { CKEY_TYPE_x           , CKEY_TYPE_X            },
 { CKEY_TYPE_c           , CKEY_TYPE_C            },
 { CKEY_TYPE_v           , CKEY_TYPE_V            },
 { CKEY_TYPE_b           , CKEY_TYPE_B            },
 { CKEY_TYPE_n           , CKEY_TYPE_N            },
 { CKEY_TYPE_m           , CKEY_TYPE_M            },
 { CKEY_TYPE_Comma       , CKEY_TYPE_Less         },
 { CKEY_TYPE_Period      , CKEY_TYPE_Greater      },
 { CKEY_TYPE_Slash       , CKEY_TYPE_Question     },
};

struct KeycodeChar {
  CKeyType keycode;
  char     c;
};

static KeycodeChar
keycode_char[] = {
 { CKEY_TYPE_Space        ,  ' ' },
 { CKEY_TYPE_Exclam       ,  '!' },
 { CKEY_TYPE_QuoteDbl     , '\"' },
 { CKEY_TYPE_NumberSign   ,  '#' },
 { CKEY_TYPE_Dollar       ,  '$' },
 { CKEY_TYPE_Percent      ,  '%' },
 { CKEY_TYPE_Ampersand    ,  '&' },
 { CKEY_TYPE_Apostrophe   , '\'' },
 { CKEY_TYPE_ParenLeft    ,  '(' },
 { CKEY_TYPE_ParenRight   ,  ')' },
 { CKEY_TYPE_Asterisk     ,  '*' },
 { CKEY_TYPE_Plus         ,  '+' },
 { CKEY_TYPE_Comma        ,  ',' },
 { CKEY_TYPE_Minus        ,  '-' },
 { CKEY_TYPE_Period       ,  '.' },
 { CKEY_TYPE_Slash        ,  '/' },
 { CKEY_TYPE_0            ,  '0' },
 { CKEY_TYPE_1            ,  '1' },
 { CKEY_TYPE_2            ,  '2' },
 { CKEY_TYPE_3            ,  '3' },
 { CKEY_TYPE_4            ,  '4' },
 { CKEY_TYPE_5            ,  '5' },
 { CKEY_TYPE_6            ,  '6' },
 { CKEY_TYPE_7            ,  '7' },
 { CKEY_TYPE_8            ,  '8' },
 { CKEY_TYPE_9            ,  '9' },
 { CKEY_TYPE_Colon        ,  ':' },
 { CKEY_TYPE_Semicolon    ,  ';' },
 { CKEY_TYPE_Less         ,  '<' },
 { CKEY_TYPE_Equal        ,  '=' },
 { CKEY_TYPE_Greater      ,  '>' },
 { CKEY_TYPE_Question     ,  '?' },
 { CKEY_TYPE_At           ,  '@' },
 { CKEY_TYPE_A            ,  'A' },
 { CKEY_TYPE_B            ,  'B' },
 { CKEY_TYPE_C            ,  'C' },
 { CKEY_TYPE_D            ,  'D' },
 { CKEY_TYPE_E            ,  'E' },
 { CKEY_TYPE_F            ,  'F' },
 { CKEY_TYPE_G            ,  'G' },
 { CKEY_TYPE_H            ,  'H' },
 { CKEY_TYPE_I            ,  'I' },
 { CKEY_TYPE_J            ,  'J' },
 { CKEY_TYPE_K            ,  'K' },
 { CKEY_TYPE_L            ,  'L' },
 { CKEY_TYPE_M            ,  'M' },
 { CKEY_TYPE_N            ,  'N' },
 { CKEY_TYPE_O            ,  'O' },
 { CKEY_TYPE_P            ,  'P' },
 { CKEY_TYPE_Q            ,  'Q' },
 { CKEY_TYPE_R            ,  'R' },
 { CKEY_TYPE_S            ,  'S' },
 { CKEY_TYPE_T            ,  'T' },
 { CKEY_TYPE_U            ,  'U' },
 { CKEY_TYPE_V            ,  'V' },
 { CKEY_TYPE_W            ,  'W' },
 { CKEY_TYPE_X            ,  'X' },
 { CKEY_TYPE_Y            ,  'Y' },
 { CKEY_TYPE_Z            ,  'Z' },
 { CKEY_TYPE_BracketLeft  ,  '[' },
 { CKEY_TYPE_Backslash    , '\\' },
 { CKEY_TYPE_BracketRight ,  ']' },
 { CKEY_TYPE_AsciiCircum  ,  '^' },
 { CKEY_TYPE_Underscore   ,  '_' },
 { CKEY_TYPE_QuoteLeft    ,  '`' },
 { CKEY_TYPE_a            ,  'a' },
 { CKEY_TYPE_b            ,  'b' },
 { CKEY_TYPE_c            ,  'c' },
 { CKEY_TYPE_d            ,  'd' },
 { CKEY_TYPE_e            ,  'e' },
 { CKEY_TYPE_f            ,  'f' },
 { CKEY_TYPE_g            ,  'g' },
 { CKEY_TYPE_h            ,  'h' },
 { CKEY_TYPE_i            ,  'i' },
 { CKEY_TYPE_j            ,  'j' },
 { CKEY_TYPE_k            ,  'k' },
 { CKEY_TYPE_l            ,  'l' },
 { CKEY_TYPE_m            ,  'm' },
 { CKEY_TYPE_n            ,  'n' },
 { CKEY_TYPE_o            ,  'o' },
 { CKEY_TYPE_p            ,  'p' },
 { CKEY_TYPE_q            ,  'q' },
 { CKEY_TYPE_r            ,  'r' },
 { CKEY_TYPE_s            ,  's' },
 { CKEY_TYPE_t            ,  't' },
 { CKEY_TYPE_u            ,  'u' },
 { CKEY_TYPE_v            ,  'v' },
 { CKEY_TYPE_w            ,  'w' },
 { CKEY_TYPE_x            ,  'x' },
 { CKEY_TYPE_y            ,  'y' },
 { CKEY_TYPE_z            ,  'z' },
 { CKEY_TYPE_BraceLeft    ,  '{' },
 { CKEY_TYPE_Bar          ,  '|' },
 { CKEY_TYPE_BraceRight   ,  '}' },
 { CKEY_TYPE_AsciiTilde   ,  '~' },
};
